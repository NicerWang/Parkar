name: build&deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  service-user:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - name: JAVA - Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Maven - Build
        run: cd service-user && mvn package -Dmaven.test.skip=true
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USER }}"
          password: "${{ secrets.ACR_KEY }}"
      - name: Build and push image
        run: |
          cd service-user
          docker build -t registry.cn-hangzhou.aliyuncs.com/parkar/user:${{ steps.get_version.outputs.VERSION }} .
          docker push registry.cn-hangzhou.aliyuncs.com/parkar/user:${{ steps.get_version.outputs.VERSION }}
      - name: Copy SQL files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_USER }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "database/service-user/*"
          target: "~/Parkar"
      - name: Deploy bash
        uses: fifsky/ssh-action@master
        with:
          command: |
            sh start-user.sh
          host: ${{ secrets.HOST_USER }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
  service-admin:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - name: JAVA - Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Maven - Build
        run: cd service-admin && mvn package -Dmaven.test.skip=true
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USER }}"
          password: "${{ secrets.ACR_KEY }}"
      - name: Build and push image
        run: |
          cd service-admin
          docker build -t registry.cn-hangzhou.aliyuncs.com/parkar/admin:${{ steps.get_version.outputs.VERSION }} .
          docker push registry.cn-hangzhou.aliyuncs.com/parkar/admin:${{ steps.get_version.outputs.VERSION }}
      - name: Copy SQL files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_ADMIN }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "database/service-admin/*"
          target: "~/Parkar"
      - name: Deploy bash
        uses: fifsky/ssh-action@master
        with:
          command: |
            sh start-admin.sh
          host: ${{ secrets.HOST_ADMIN }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
  service-management:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - name: JAVA - Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Maven - Build
        run: cd service-management && mvn package -Dmaven.test.skip=true
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USER }}"
          password: "${{ secrets.ACR_KEY }}"
      - name: Build and push image
        run: |
          cd service-management
          docker build -t registry.cn-hangzhou.aliyuncs.com/parkar/management:${{ steps.get_version.outputs.VERSION }} .
          docker push registry.cn-hangzhou.aliyuncs.com/parkar/management:${{ steps.get_version.outputs.VERSION }}
      - name: Copy SQL files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_MANAGEMENT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "database/service-management/*"
          target: "~/Parkar"
      - name: Deploy bash
        uses: fifsky/ssh-action@master
        with:
          command: |
            sh start-management.sh
          host: ${{ secrets.HOST_MANAGEMENT }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
  frontend-user:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - name: Node.js - Set up
        uses: actions/setup-node@v2.4.1
      - name: NPM - Build
        run: cd frontend-user && npm install --registry=https://registry.npm.taobao.org && npm run build
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USER }}"
          password: "${{ secrets.ACR_KEY }}"
      - name: Build and push image
        run: |
          cd frontend-user
          docker build -t registry.cn-hangzhou.aliyuncs.com/parkar/frontend-user:${{ steps.get_version.outputs.VERSION }} .
          docker push registry.cn-hangzhou.aliyuncs.com/parkar/frontend-user:${{ steps.get_version.outputs.VERSION }}
      - name: Deploy bash
        uses: fifsky/ssh-action@master
        with:
          command: |
            sh start-frontend-user.sh
          host: ${{ secrets.HOST_FRONT }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
  frontend-management:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - name: Node.js - Set up
        uses: actions/setup-node@v2.4.1
      - name: NPM - Build
        run: cd frontend-management && npm install --registry=https://registry.npm.taobao.org && npm run build
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USER }}"
          password: "${{ secrets.ACR_KEY }}"
      - name: Build and push image
        run: |
          cd frontend-management
          docker build -t registry.cn-hangzhou.aliyuncs.com/parkar/frontend-management:${{ steps.get_version.outputs.VERSION }} .
          docker push registry.cn-hangzhou.aliyuncs.com/parkar/frontend-management:${{ steps.get_version.outputs.VERSION }}
      - name: Deploy bash
        uses: fifsky/ssh-action@master
        with:
          command: |
            sh start-frontend-management.sh
          host: ${{ secrets.HOST_FRONT }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}